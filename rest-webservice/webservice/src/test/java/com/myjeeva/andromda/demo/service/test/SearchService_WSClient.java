// license-header java merge-point
/* Autogenerated on 10/04/2012 00:47:02+0530 by AndroMDA DO NOT EDIT!
 *
 * TEMPLATE:    cxf/WSClient.vsl in andromda-webservices-cartridge
 * MODEL CLASS: AndroMDAModel::com.myjeeva.andromda.demo::service::SearchService
 * STEREOTYPE:  WebService
 * STEREOTYPE:  Service
*/
package com.myjeeva.andromda.demo.service.test;

import com.myjeeva.andromda.demo.service.SearchServiceSEI;
import com.myjeeva.andromda.demo.service.SearchServiceSEIClient;
import java.net.URL;
import javax.xml.namespace.QName;
import java.io.IOException;
import java.io.InputStream;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.core.Response;
import org.apache.cxf.helpers.IOUtils;
import org.apache.cxf.jaxrs.client.WebClient;
import junit.framework.TestCase;
import junit.textui.TestRunner;

/**
 * Client test for the SearchService web service. Modified from CXF generated test client.
 * 
 */
public final class SearchService_WSClient extends TestCase
{
    private static final QName SERVICE_NAME = new QName("http://service.demo.andromda.myjeeva.com/", "SearchService");
    private static URL wsdlURL = null;

    /**
     * Public constructor for JUnit
     */
    public SearchService_WSClient()
    {
        // Documented empty constructor - avoid compiler warning
    }

    /**
     * @param name
     */
    public SearchService_WSClient(String name)
    {
        super(name);
    }

    /**
     * @see junit.framework.TestCase#setUp()
     */
    @Override
    protected void setUp() throws Exception
    {
        super.setUp();
        //if (args.length == 0)
        //{
            wsdlURL = SearchServiceSEIClient.WSDL_LOCATION;
        //}
        /*else
        {
            File wsdlFile = new File(args[0]);
            try
            {
                if (wsdlFile.exists())
                {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else
                {
                    wsdlURL = new URL(args[0]);
                }
            }
            catch (MalformedURLException e)
            {
                e.printStackTrace();
            }
        } */
    }

    /**
     * @see junit.framework.TestCase#tearDown()
     */
    @Override
    protected void tearDown() throws Exception
    {
        super.tearDown();
    }

    /**
     * @param args
     * @throws Exception
     */
    public static void main(String args[]) throws Exception
    {
        TestRunner.run(SearchService_WSClient.class);

        /*

       //  String _indexDocument__return =           testIndexDocument(port);

       //  String _performSearch__return =           testPerformSearch(port);
       */
    }
    /**
     * Test SearchService Service indexDocument
     */
    public void testIndexDocument()
    {
        com.myjeeva.andromda.demo.service.IndexDocument indexDocumentInput = com.myjeeva.andromda.demo.service.IndexDocumentImpl.indexDocumentCreateInput();
        System.out.println("Invoking indexDocument on SearchService with"
            + " documents=" + indexDocumentInput.getDocuments()
        );
        Response response = null;
        InputStream is = null;
        int length = 0;
        String _indexDocument__return = "Failed to read output from result";
        // TODO Fix request URL to contain actual data instead of {} http://localhost:9090/rest-webservice-webservice/services/searchservice/index/{documents: .*}/
        String restURL = "http://localhost:9090/rest-webservice-webservice/services/searchservice/index/{documents: .*}/";
        System.out.println("Creating REST Webclient for URL " + restURL);
        try
        {
            WebClient client = WebClient.create(restURL);
            javax.xml.bind.JAXBContext ctx = javax.xml.bind.JAXBContext.newInstance(com.myjeeva.andromda.demo.vo.DocumentVO.class);
            java.io.StringWriter writer = new java.io.StringWriter();
            ctx.createMarshaller().marshal(indexDocumentInput.getDocuments(), writer);
            System.out.println(writer.toString());
            response = client.path("").type("application/json").accept("application/json").post(writer.toString());
            is = (InputStream)response.getEntity();
            length = is.available();
            _indexDocument__return = IOUtils.readStringFromStream(is);
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        catch (Exception ex)
        {
            try
            {
                if (is != null)
                {
                    is.close();
                }
            }
            catch (IOException ignore)
            {
                // Ignore close exception - already closed
            }
        }
        if (response != null)
        {
            if (response.getStatus()==HttpServletResponse.SC_OK && length>0)
            {
                System.out.println("SUCCESS indexDocument.result=" + response.getStatus() + " indexDocument.size=" + length);
            }
            else
            {
                System.out.println("FAILURE indexDocument.result=" + response.getStatus() + " indexDocument.size=" + length);
            }
        }
        else
        {
            System.out.println("FAILURE Received null response");
        }
        assertNotNull(response);
        assertTrue(length>0);
        System.out.println("indexDocument.result=" + _indexDocument__return);
        // return _indexDocument__return;
    }

    /**
     * Test SearchService Service performSearch
     */
    public void testPerformSearch()
    {
        com.myjeeva.andromda.demo.service.PerformSearch performSearchInput = com.myjeeva.andromda.demo.service.PerformSearchImpl.performSearchCreateInput();
        System.out.println("Invoking performSearch on SearchService with"
            + " queryTerm=" + performSearchInput.getQueryTerm()
        );
        Response response = null;
        InputStream is = null;
        int length = 0;
        String _performSearch__return = "Failed to read output from result";
        String restURL = "http://localhost:9090/rest-webservice-webservice/services/searchservice/search/queryTerm/";
        System.out.println("Creating REST Webclient for URL " + restURL);
        try
        {
            WebClient client = WebClient.create(restURL);
            response = client.path("").type("application/json").accept("application/json").get();
            is = (InputStream)response.getEntity();
            length = is.available();
            _performSearch__return = IOUtils.readStringFromStream(is);
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        catch (Exception ex)
        {
            try
            {
                if (is != null)
                {
                    is.close();
                }
            }
            catch (IOException ignore)
            {
                // Ignore close exception - already closed
            }
        }
        if (response != null)
        {
            if (response.getStatus()==HttpServletResponse.SC_OK && length>0)
            {
                System.out.println("SUCCESS performSearch.result=" + response.getStatus() + " performSearch.size=" + length);
            }
            else
            {
                System.out.println("FAILURE performSearch.result=" + response.getStatus() + " performSearch.size=" + length);
            }
        }
        else
        {
            System.out.println("FAILURE Received null response");
        }
        assertNotNull(response);
        assertTrue(length>0);
        System.out.println("performSearch.result=" + _performSearch__return);
        // return _performSearch__return;
    }

    /**
     * JUnit test data class, used by DataDrivenTestSuite in suite()
     */
    public static class SearchServiceTestData
    {
        // TODO: Add test data fields here (populated by SearchService.xls spreadsheet
        // TODO: Recursively list every primitive parameter in entire operation parameter hierarchy
        @SuppressWarnings("unused")
        private com.myjeeva.andromda.demo.vo.DocumentVO indexDocumentDocuments;
        /**
         * Data value for documents indexDocument on used by DataDrivenTestSuite in suite().
         * indexDocumentdocuments must be the column name of the parameter in the spreadsheet
         * @param value DocumentVO to be populated manually
         */
        public void setIndexDocumentDocuments(com.myjeeva.andromda.demo.vo.DocumentVO value)
        {
            this.indexDocumentDocuments = value;
        }
        @SuppressWarnings("unused")
        private java.lang.String performSearchQueryTerm;
        /**
         * Data value for queryTerm performSearch on used by DataDrivenTestSuite in suite().
         * performSearchqueryTerm must be the column name of the parameter in the spreadsheet
         * @param value String to be populated manually
         */
        public void setPerformSearchQueryTerm(java.lang.String value)
        {
            this.performSearchQueryTerm = value;
        }
    }
}
