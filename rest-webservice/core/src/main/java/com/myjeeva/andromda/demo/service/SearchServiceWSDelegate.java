// license-header java merge-point
/* Autogenerated on 09/30/2012 15:47:16+0530 by AndroMDA
 *
 * TEMPLATE:    jaxws/WebServiceDelegate.vsl in andromda-webservices-cartridge
 * MODEL CLASS: AndroMDAModel::com.myjeeva.andromda.demo::service::SearchService
 * STEREOTYPE:  WebService
 * STEREOTYPE:  Service
*/
package com.myjeeva.andromda.demo.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.myjeeva.andromda.demo.ServiceLocator;
import com.myjeeva.andromda.demo.vo.Document;
import com.myjeeva.andromda.demo.vo.SearchResult;

/**
 * WebService Service Endpoint Implementation delegate for the SearchService service.
 * 
 */

public class SearchServiceWSDelegate
{
   private static final Logger LOG = LoggerFactory.getLogger(SearchServiceWSDelegate.class);
   //private static final String className = "SearchServiceWSDelegate";

    /**
     * Constructor
     */
    public SearchServiceWSDelegate()
    {
        //Documented empty code block - avoid compiler warning
    }

   /**
    * Invokes the indexDocument service method on SearchService.
    * 
    * @param documents Document multiplicity=0..-1
    * @return indexDocumentResponse Boolean
    */
    public Boolean indexDocument
    (
        List<Document> documents
    )
    {
        // Populate method wrapper object so all parameters can be logged and transformed at once
        // Transform input parameters to domain request object
        /*Boolean rtn =*/ IndexDocumentImpl.indexDocumentTransformInput(
            documents
        );

        //TODO: Implement service operation
        //throw new UnsupportedOperationException("Service SearchService.indexDocument not implemented.");
        // Dummy return value implementation with default values, modify Impl class.
        Boolean rtn = IndexDocumentImpl.indexDocumentTransformResponse(/* Domain response to be transformed to service response */);
        return rtn;
    }

   /**
    * Invokes the performSearch service method on SearchService.
    * 
    * @param queryTerm datatype String multiplicity=1..1
    * @return performSearchResponse SearchResult
    */
    public SearchResult performSearch
    (
        String queryTerm
    )
    {
    	SearchResult searchResult = new SearchResult();
        
        Document document1 = new Document();
        document1.setId("MA147LL/A");
        document1.setName("Apple 60 GB iPod with Video Playback Black");
        document1.setInStock(Boolean.TRUE);
        document1.setPrice(Double.valueOf(399.0));
        document1.getFeatures().add("iTunes, Podcasts, Audiobooks");
        document1.getFeatures().add("Stores up to 15,000 songs, 25,000 photos, or 150 hours of video");
        document1.getFeatures().add("2.5-inch, 320x240 color TFT LCD display with LED backlight");
        document1.getFeatures().add("Plays AAC, MP3, WAV, AIFF, Audible, Apple Lossless, H.264 video");
        document1.getFeatures().add("Notes, Calendar, Phone book, Hold button, Date display, "
					+ "Photo wallet, Built-in games, JPEG photo playback, Upgradeable "
					+ "firmware, USB 2.0 compatibility, Playback speed control, "
					+ "Rechargeable capability, Battery level indication");
        
        Document document2 = new Document();
        document2.setId("6H500F0");
        document2.setName("Maxtor DiamondMax 11 - hard drive - 500 GB - SATA-300");
        document2.setInStock(Boolean.FALSE);
        document2.setPrice(Double.valueOf(350.0));
        document2.getFeatures().add("SATA 3.0Gb/s, NCQ");
        document2.getFeatures().add("8.5ms seek");
        document2.getFeatures().add("16MB cache");
        
        Document document3 = new Document();
        document3.setId("IW-02");
        document3.setName("iPod &amp; iPod Mini USB 2.0 Cable");
        document3.setInStock(Boolean.TRUE);
        document3.setPrice(Double.valueOf(11.5));
        document3.getFeatures().add("car power adapter for iPod, white");
        
        searchResult.getDocuments().add(document1);
        searchResult.getDocuments().add(document2);
        searchResult.getDocuments().add(document3);
        
        return searchResult;
    }
}