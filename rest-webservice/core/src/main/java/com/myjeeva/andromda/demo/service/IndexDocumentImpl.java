// license-header java merge-point
/* Autogenerated on 10/04/2012 00:33:24+0530 by AndroMDA!
 *
 * TEMPLATE:    jaxws\WebServiceMethodImpl.vsl in andromda-webservices-cartridge
 * MODEL CLASS: AndroMDAModel::com.myjeeva.andromda.demo::service::SearchService::indexDocument
 * STEREOTYPE:  WebService on SearchService
 * STEREOTYPE:  Service on SearchService
 * STEREOTYPE:  WebServiceOperation on indexDocument
*/
package com.myjeeva.andromda.demo.service;

/**
 * WebService Service Method Implementation for the SearchService
 * service org.andromda.cartridges.webservice.metafacades.WebServiceOperationLogicImpl[com.myjeeva.andromda.demo.service.SearchService.indexDocument].
 * 
 */

public class IndexDocumentImpl
{
    /**
     * Constructor
     */
    public IndexDocumentImpl()
    {
        //Documented empty code block - avoid compiler warning
    }

    /**
     * Delegate for TestCase SearchServiceWSDelegateTest and SearchServiceSEIImplTest
     */
    public static void indexDocumentSetUp()
    {
        // Insert your custom code here for additional required unit test case setup for service method
    }

    /**
     * Delegate for TestCase SearchServiceWSDelegateTest and SearchServiceSEIImplTest
     */
    public static void indexDocumentTearDown()
    {
        // Insert your custom code here for additional required unit test case tear down for service method
    }

   /**
    * Transforms the indexDocument service method parameters on SearchService.
    * 
    * @param documents com.myjeeva.andromda.demo.vo.DocumentVO multiplicity=0..-1
    * Replace void with transformed type, use target.set() values to create transformation
    */
    public static void indexDocumentTransformInput(
        final java.util.List<com.myjeeva.andromda.demo.vo.DocumentVO> documents
    )
    {

        if (documents != null && !documents.isEmpty())
        {
            for (com.myjeeva.andromda.demo.vo.DocumentVO documentsElement : documents)
            {
                // property id with 0 properties:
                java.lang.String id1 = documentsElement.getId();
                if (id1 != null)
                {
                }
                // property name with 0 properties:
                java.lang.String name2 = documentsElement.getName();
                if (name2 != null)
                {
                }
                // property inStock with 0 properties:
                java.lang.Boolean inStock3 = documentsElement.getInStock();
                if (inStock3 != null)
                {
                }
                // property price with 0 properties:
                java.lang.Double price4 = documentsElement.getPrice();
                if (price4 != null)
                {
                }
                // property features with 0 properties:
                java.util.List<java.lang.String> features4List = documentsElement.getFeatures();
                if (features4List != null && !features4List.isEmpty())
                {
                    for (java.lang.String features4 : documentsElement.getFeatures())
                    {
                    }
                }
            }
        }
    }

   /**
    * Transforms input to an output response for indexDocument service method on SearchService.
    * 
    * @return indexDocumentResponse java.lang.Boolean
    */
    public static java.lang.Boolean indexDocumentTransformResponse(
        /* Domain response to be transformed to service response */)
        // throws TransformationException?
    {
        // Dummy return value implementation with default values...
        // Iterate down through all complex types and create default dummy constructor and attribute values
        java.lang.Boolean rtn = Boolean.TRUE;

        return rtn;
    }

    /** Create input test data for SearchService indexDocument
     * Used by webservice WSClient (against service) and core service WSDelegateTest (against implementation).
     * Return wrapped parameters:
     * documents: com.myjeeva.andromda.demo.vo.DocumentVO
     * @return indexDocumentReturn com.myjeeva.andromda.demo.service.IndexDocument WS Input parameter wrapper (assumes wrapped WSDL)
     **/
    public static com.myjeeva.andromda.demo.service.IndexDocument indexDocumentCreateInput()
    {
        com.myjeeva.andromda.demo.service.IndexDocument indexDocumentReturn = new com.myjeeva.andromda.demo.service.IndexDocument();

        // parameter1 documentsElementParam1 with 5 properties: id name inStock price features
        com.myjeeva.andromda.demo.vo.DocumentVO documentsElementParam1 = new com.myjeeva.andromda.demo.vo.DocumentVO();
        documentsElementParam1.setId("id");
        documentsElementParam1.setName("name");
        documentsElementParam1.setInStock(Boolean.TRUE);
        documentsElementParam1.setPrice(java.lang.Double.valueOf(1));
        documentsElementParam1.getFeatures().add("features");
        // java.util.List<com.myjeeva.andromda.demo.vo.DocumentVO> documentsElementParam1 = new java.util.ArrayList<com.myjeeva.andromda.demo.vo.DocumentVO>();
        indexDocumentReturn.getDocuments().add(documentsElementParam1);

        return indexDocumentReturn;
    }
}

